// --- Configuration ---
const SPREADSHEET_URL = 'YOUR_GOOGLE_SHEET_URL_HERE'; // **REQUIRED**: Replace with the URL of your Google Sheet
const LOOKBACK_DAYS = 30; // Number of days to look back for data
const MIN_IMPRESSIONS = 1; // Minimum impressions for a search theme to be included (adjust as needed)
const CAMPAIGN_NAME_CONTAINS = ''; // Optional: Filter by campaign name (e.g., 'PMax - My Campaign'). Leave empty for all PMax campaigns.

// --- Main Function ---
function main() {
  const spreadsheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);

  // --- Setup PMax Search Themes Sheet ---
  let searchThemesSheet = spreadsheet.getSheetByName('PMax Search Themes');
  if (!searchThemesSheet) {
    searchThemesSheet = spreadsheet.insertSheet('PMax Search Themes');
  } else {
    searchThemesSheet.clearContents();
  }

  // Headers for the sheet
  // Conversions & Conv. Value are per Theme. Cost is Campaign Total.
  const headers = [
    'Campaign Name',
    'Search Theme (Category Label)',
    'Clicks (Theme)',
    'Impressions (Theme)',
    'CTR (Theme)',
    'Conversions (Theme)',
    'Conversion Value (Theme)',
    'Campaign Cost (Total)'
  ];
  searchThemesSheet.appendRow(headers);

  const endDate = new Date();
  const startDate = new Date();
  startDate.setDate(endDate.getDate() - LOOKBACK_DAYS);

  const formattedStartDate = Utilities.formatDate(startDate, AdsApp.currentAccount().getTimeZone(), 'yyyyMMdd');
  const formattedEndDate = Utilities.formatDate(endDate, AdsApp.currentAccount().getTimeZone(), 'yyyyMMdd');

  Logger.log(`Fetching PMax Search Themes from ${formattedStartDate} to ${formattedEndDate}`);

  // Query to get Performance Max campaigns and their overall cost (since cost is not available per theme)
  let campaignCostQuery = `
    SELECT
      campaign.id,
      campaign.name,
      metrics.cost_micros
    FROM
      campaign
    WHERE
      campaign.advertising_channel_type = 'PERFORMANCE_MAX'
      AND campaign.status = 'ENABLED'
      AND segments.date BETWEEN '${formattedStartDate}' AND '${formattedEndDate}'
  `;

  if (CAMPAIGN_NAME_CONTAINS) {
    campaignCostQuery += ` AND campaign.name CONTAINS '${CAMPAIGN_NAME_CONTAINS}'`;
  }

  const campaignCostIterator = AdsApp.report(campaignCostQuery).rows();
  const campaignCostMap = new Map(); // Store campaign-level cost for quick lookup

  // First pass: Populate campaignCostMap with total campaign costs
  while (campaignCostIterator.hasNext()) {
    const campaignRow = campaignCostIterator.next();
    const campaignId = campaignRow['campaign.id'];
    const campaignName = campaignRow['campaign.name'];
    const campaignCost = campaignRow['metrics.cost_micros'] / 1000000;

    campaignCostMap.set(campaignId, {
      name: campaignName,
      cost: campaignCost
    });
  }

  // Second pass: Get search theme insights with Clicks, Impressions, Conversions, Conversion Value
  // We re-use the campaignCostQuery to iterate through relevant PMax campaigns again.
  const pmaxCampaignsIterator = AdsApp.report(campaignCostQuery).rows();

  while (pmaxCampaignsIterator.hasNext()) {
    const campaignRow = pmaxCampaignsIterator.next();
    const campaignId = campaignRow['campaign.id'];
    const campaignName = campaignRow['campaign.name']; // Use campaign name from this iteration

    const campaignCostData = campaignCostMap.get(campaignId);

    if (!campaignCostData) {
      Logger.log(`Warning: No campaign cost data found for campaign ID: ${campaignId}. Skipping.`);
      continue;
    }

    Logger.log(`Processing PMax Campaign: ${campaignName} (ID: ${campaignId}) for Search Themes.`);

    // Query to get search term insights (categories/themes) for the campaign.
    // This now includes clicks, impressions, conversions, and conversion_value per theme.
    const themeQuery = `
      SELECT
        campaign_search_term_insight.campaign_id,
        campaign_search_term_insight.category_label,
        metrics.clicks,
        metrics.impressions,
        metrics.conversions,
        metrics.conversions_value
      FROM
        campaign_search_term_insight
      WHERE
        segments.date BETWEEN '${formattedStartDate}' AND '${formattedEndDate}'
        AND campaign_search_term_insight.campaign_id = ${campaignId}
        AND metrics.impressions >= ${MIN_IMPRESSIONS}
      ORDER BY
        metrics.impressions DESC
    `;

    const themeIterator = AdsApp.report(themeQuery).rows();

    while (themeIterator.hasNext()) {
      const themeRow = themeIterator.next();
      const themeLabel = themeRow['campaign_search_term_insight.category_label'];
      const themeClicks = themeRow['metrics.clicks'];
      const themeImpressions = themeRow['metrics.impressions'];
      const themeConversions = themeRow['metrics.conversions'];
      const themeConversionValue = themeRow['metrics.conversions_value'];

      const themeCtr = themeImpressions > 0 ? (themeClicks / themeImpressions * 100).toFixed(2) + '%' : '0.00%';

      searchThemesSheet.appendRow([
        campaignCostData.name, // Campaign Name (from the cost map data)
        themeLabel,
        themeClicks,
        themeImpressions,
        themeCtr,
        themeConversions.toFixed(1),      // Conversions specific to this theme
        themeConversionValue.toFixed(2),  // Conversion Value specific to this theme
        campaignCostData.cost.toFixed(2)  // Total Campaign Cost for context
      ]);
    }
  }

  Logger.log('Script finished. PMax Search Themes exported to Google Sheet.');
}
